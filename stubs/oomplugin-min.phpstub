<?php
namespace TMD\OrderOfMass\Plugin {
    class BCP47
    {
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @var array
         */
        private array $data;
        /**
         * @param array $arr
         * @param int $case
         *
         * @return array
         */
        public function array_change_key_case_recursive($arr, $case) : array
        {
        }
        /**
         * @param \Psr\Log\LoggerInterface $log
         */
        public function __construct(\Psr\Log\LoggerInterface $log)
        {
        }
        /**
         * @param string $identifier
         *
         * @return string
         */
        public function get_lang_name(string $identifier) : string
        {
        }
    }
    class Bible
    {
        /**
         * @var BCP47
         */
        private \TMD\OrderOfMass\Plugin\BCP47 $bcp47;
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @var Parameters
         */
        private \TMD\OrderOfMass\Plugin\Parameters $parameters;
        /**
         * @param BCP47 $bcp47
         * @param \Psr\Log\LoggerInterface $log
         * @param Parameters $parameters
         */
        public function __construct(\TMD\OrderOfMass\Plugin\BCP47 $bcp47, \Psr\Log\LoggerInterface $log, \TMD\OrderOfMass\Plugin\Parameters $parameters)
        {
        }
        /**
         * @return void
         */
        public function render_options()
        {
        }
    }
    class Calendar
    {
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @var array
         */
        private array $days;
        /**
         * @param \Psr\Log\LoggerInterface $log
         */
        public function __construct(\Psr\Log\LoggerInterface $log)
        {
        }
        /**
         * @param string $date
         *
         * @return string
         *
         * @throws \Exception
         */
        public function date_abbr(string $date) : string
        {
        }
        /**
         * @param string $abbr
         *
         * @return string
         */
        public function abbr_description(string $abbr) : string
        {
        }
        /**
         * @param int $liturgical_year
         *
         * @return string
         */
        public function year_cycle(int $liturgical_year) : string
        {
        }
        /**
         * @param int $liturgical_year
         *
         * @return string
         */
        public function week_cycle(int $liturgical_year) : string
        {
        }
        /**
         * @param string $date
         *
         * @return int
         *
         * @throws \Exception
         */
        public function liturgical_year(string $date) : int
        {
        }
        /**
         * @param int $liturgical_year
         * @param bool $traditional_epiphany
         * @param bool $traditional_ascension
         *
         * @return void
         */
        public function generate_calendar(int $liturgical_year, bool $traditional_epiphany = true, bool $traditional_ascension = false)
        {
        }
    }
    class Commands
    {
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @param \Psr\Log\LoggerInterface $log
         */
        public function __construct(\Psr\Log\LoggerInterface $log)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param array $atts
         * @param string $content
         * @param string $shortcode_tag
         *
         * @return string
         */
        public function shortcode($atts, $content, $shortcode_tag) : string
        {
        }
    }
    class Conditional
    {
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @var Parameters
         */
        private \TMD\OrderOfMass\Plugin\Parameters $parameters;
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @param \Psr\Log\LoggerInterface $log
         * @param Parameters $parameters
         */
        public function __construct(\Psr\Log\LoggerInterface $log, \TMD\OrderOfMass\Plugin\Parameters $parameters)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param array{bafiky: array<string, string>} $block_attributes
         * @param string $content
         *
         * @return void
         *
         * @throws \Exception
         */
        public function render_block($block_attributes, $content)
        {
        }
    }
    class GlobalJS
    {
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @return void
         */
        public function enqueue_scripts()
        {
        }
    }
    class Labels
    {
        /**
         * @var BCP47
         */
        private \TMD\OrderOfMass\Plugin\BCP47 $bcp47;
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @var Parameters
         */
        private \TMD\OrderOfMass\Plugin\Parameters $parameters;
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * @param BCP47 $bcp47
         * @param \Psr\Log\LoggerInterface $log
         * @param Parameters $parameters
         */
        public function __construct(\TMD\OrderOfMass\Plugin\BCP47 $bcp47, \Psr\Log\LoggerInterface $log, \TMD\OrderOfMass\Plugin\Parameters $parameters)
        {
        }
        /**
         * @return void
         */
        public function render_settings()
        {
        }
        /**
         * @param mixed $args
         *
         * @return void
         */
        public function render_section_main($args)
        {
        }
        /**
         * @param mixed $args
         *
         * @return void
         */
        public function render_languages($args)
        {
        }
        /**
         * @param mixed $args
         *
         * @return void
         */
        public function render_list($args)
        {
        }
        /**
         * @param array $atts
         * @param string $content
         * @param string $shortcode_tag
         *
         * @return string
         *
         * @throws \InvalidArgumentException
         */
        public function shortcode_oomlabel($atts, $content, $shortcode_tag)
        {
        }
        /**
         * @param string $label
         *
         * @return string
         */
        public function get_label(string $label) : string
        {
        }
        /**
         * @return void
         */
        public function render_options()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param callable $loop_fcn
         *
         * @return void
         */
        public function loop_languages($loop_fcn)
        {
        }
        /**
         * @param callable $loop_fcn
         *
         * @return void
         */
        public function loop_list($loop_fcn)
        {
        }
        /**
         * @param mixed $options
         *
         * @return mixed
         */
        public function allowed_options($options)
        {
        }
        /**
         * @return void
         */
        public function admin_menu()
        {
        }
        /**
         * @return void
         */
        public function admin_init()
        {
        }
    }
    class Lectionary
    {
        /**
         * @var Calendar
         */
        private \TMD\OrderOfMass\Plugin\Calendar $calendar;
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @var Parameters
         */
        private \TMD\OrderOfMass\Plugin\Parameters $parameters;
        /**
         * @var Labels
         */
        private \TMD\OrderOfMass\Plugin\Labels $labels;
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @param Calendar $calendar
         * @param Labels $labels
         * @param \Psr\Log\LoggerInterface $log
         * @param Parameters $parameters
         */
        public function __construct(\TMD\OrderOfMass\Plugin\Calendar $calendar, \TMD\OrderOfMass\Plugin\Labels $labels, \Psr\Log\LoggerInterface $log, \TMD\OrderOfMass\Plugin\Parameters $parameters)
        {
        }
        /**
         * @param string $type
         * @param string $date
         * @param string $lectionary
         *
         * @return array<string, non-empty-list<string>>
         */
        public function get_reference(string $type, string $date, string $lectionary) : array
        {
        }
        /**
         * @param string $lectref
         *
         * @return string
         */
        public function lect_id(string $lectref) : string
        {
        }
        /**
         * @param array<string, non-empty-list<string>> $ref
         *
         * @return string
         */
        public function ref_to_str(array $ref) : string
        {
        }
        /**
         * @param array $atts
         * @param string $content
         * @param string $shortcode_tag
         *
         * @return string
         */
        public function shortcode_oomreading($atts, $content, $shortcode_tag)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
    }
    class Log extends \Psr\Log\AbstractLogger
    {
        /**
         * @param mixed $level
         * @param \Stringable|string $message
         * @param array $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, string $message, array $context = array())
        {
        }
    }
    class Main
    {
        /**
         * @var Main|null
         */
        private static ?\TMD\OrderOfMass\Plugin\Main $me;
        /**
         * @var \DI\Container
         */
        public $container;
        public function __construct()
        {
        }
        /**
         * @return Main
         */
        public static function new() : \TMD\OrderOfMass\Plugin\Main
        {
        }
        /**
         * @return void
         */
        public function run()
        {
        }
    }
    class Mysteries
    {
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @param \Psr\Log\LoggerInterface $log
         */
        public function __construct(\Psr\Log\LoggerInterface $log)
        {
        }
        /**
         * @param string $date
         *
         * @return string
         *
         * @throws \Exception
         */
        public function get_mystery(string $date) : string
        {
        }
        /**
         * @param string $mystery
         *
         * @return string
         */
        public function get_mystery_long(string $mystery) : string
        {
        }
    }
    class Parameters
    {
        public const PARAMETER_TYPE = 'type';
        public const PARAMETER_TYPE_MASS = 'mass';
        public const PARAMETER_TYPE_ROSARY = 'rosary';
        public const PARAMETER_TYPE_BIBLE = 'bible';
        public const PARAMETER_TEXTS = 'texts';
        public const PARAMETER_LABELS = 'labels';
        public const PARAMETER_DATE = 'date';
        public const PARAMETER_BIBLE = 'bible';
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @param \Psr\Log\LoggerInterface $log
         */
        public function __construct(\Psr\Log\LoggerInterface $log)
        {
        }
        /**
         * @param string $param
         *
         * @return string
         *
         * @throws \Exception
         */
        public function get_parameter(string $param) : string
        {
        }
    }
    class VirtualPage
    {
        /**
         * @var BCP47
         */
        private \TMD\OrderOfMass\Plugin\BCP47 $bcp47;
        /**
         * @var \Psr\Log\LoggerInterface
         */
        private \Psr\Log\LoggerInterface $log;
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @param BCP47 $bcp47
         * @param \Psr\Log\LoggerInterface $log
         */
        public function __construct(\TMD\OrderOfMass\Plugin\BCP47 $bcp47, \Psr\Log\LoggerInterface $log)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string
         */
        public function is_virtual_page(int $post_id) : string
        {
        }
        /**
         * @return void
         */
        public function render_metabox()
        {
        }
        /**
         * @param string $current_vp
         *
         * @return void
         */
        public function render_options(string $current_vp)
        {
        }
        /**
         * @param string $current_vp
         * @param string $current_vp_child
         *
         * @return void
         */
        public function render_options_children(string $current_vp, string $current_vp_child)
        {
        }
        /**
         * @param array $post_states
         * @param \WP_Post $post
         *
         * @return array
         */
        public function filter_post_states(array $post_states, \WP_Post $post)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function filter_the_content(string $content)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @return void
         */
        public function add_meta_box()
        {
        }
        /**
         * @param int $post_id
         * @param \WP_Post $post
         * @param bool $update
         *
         * @return void
         */
        public function save_post_meta(int $post_id, \WP_Post $post, bool $update)
        {
        }
    }
}
